name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
      - name: Run migrations
        run: |
          cd server
          python manage.py makemigrations
          python manage.py migrate
      - name: Run tests
        run: |
          cd server
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/startup-hub:latest
      
      # Install required tools for connectivity testing
      - name: Install connectivity test tools
        run: |
          sudo apt-get update
          sudo apt-get install -y iputils-ping netcat-openbsd

      # Check server connectivity before attempting deployment
      - name: Check server connectivity
        run: |
          echo "Testing connectivity to ${{ secrets.SERVER_IP }}"
          ping -c 4 ${{ secrets.SERVER_IP }} || echo "Ping failed but continuing"
          nc -zv ${{ secrets.SERVER_IP }} 22 || { echo "Cannot connect to SSH port"; exit 1; }
      
      # Set up Tailscale if needed
      - name: Set up Tailscale
        if: env.TAILSCALE_AUTH_KEY != ''
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          tailscale up --authkey=$TAILSCALE_AUTH_KEY
          sleep 10 # Wait for connection to establish
          tailscale status
      
      # Verify SSH connection with extended timeout and debugging
      - name: Verify SSH connection
        timeout-minutes: 2
        run: |
          ssh -v -o "ConnectTimeout=30" -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo SSH connection successful"
        continue-on-error: true
      
      # Actual deployment with extended timeout and error handling
      - name: Deploy to server
        timeout-minutes: 5
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          echo "Starting deployment..."
          
          # Enhanced SSH command with retry logic
          for i in {1..3}; do
            echo "Attempt $i of 3"
            ssh -o "ConnectTimeout=30" -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF' && break
              echo "Connected to server, starting deployment tasks"
              docker pull ${{ secrets.DOCKER_USERNAME }}/startup-hub:latest
              docker stop startup-hub || true
              docker rm startup-hub || true
              docker-compose -f /app/docker-compose.yaml up -d
              echo "Deployment completed successfully"
          EOF
            if [ $i -eq 3 ]; then
              echo "Failed to connect after 3 attempts. Deployment failed."
              exit 1
            fi
            echo "Connection attempt failed. Waiting 10 seconds before retrying..."
            sleep 10
          done
      
      # Verify deployment
      - name: Verify deployment
        timeout-minutes: 2
        run: |
          # Try to check if the container is running
          echo "Verifying deployment..."
          ssh -o "ConnectTimeout=30" -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "docker ps | grep startup-hub" || echo "Warning: Could not verify if container is running"
        continue-on-error: true

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify deployment status
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: Deployment Status
          SLACK_MESSAGE: |
            Build: ${{ needs.build.result }}
            Deploy: ${{ needs.deploy.result }}
            ${{ needs.deploy.result == 'success' && 'Deployment completed successfully! :rocket:' || 'Deployment failed! :warning:' }}
          SLACK_COLOR: ${{ needs.deploy.result == 'success' && 'good' || 'danger' }}
        continue-on-error: true
